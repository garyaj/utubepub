
{
	Initialize "() {
AddToPluginsMenu('SetVoicePan','Run'); }"
	Run "() {
order = CreateDictionary('S', 11, 'A', 12, 'T', 23, 'B', 24);
canVoices = CreateSparseArray();
lookupVoices = CreateDictionary();
lookupCanV = CreateDictionary();
vlist = CreateSparseArray();

score = Sibelius.ActiveScore;
file = Sibelius.GetFile(score.FileName);
pathBase = file.Name;
strFileBase = file.NameNoPath;
strExtension = '.aiff';
strPath = GetTerminatedFolderName(file.Path);

for each Staff s in score {
  char1 = CharAt(s.FullInstrumentName,0);
  if (order.PropertyExists(char1)) { 
    vix = orderchar1;
  } else { 
    vix = 31;
  } 
  vlistvix = vlistvix + 1;
  cv = vix & vlistvix;
  canVoices.Push(cv);
  lookupVoicescv = s;
  vn = CharAt(s.FullInstrumentName, (Length(s.FullInstrumentName) - 1));
  if (not(utils.IsNumeric(vn,1))) {
    s.FullInstrumentName = s.FullInstrumentName & vlistvix;  
  }
  trace(s.FullInstrumentName);
  lookupCanVs.FullInstrumentName = cv;
}
tmplist = CreateSparseArray();
for each Staff s in Sibelius.ActiveScore {
  char1 = CharAt(s.FullInstrumentName,0);
  trace('char1:' & char1);
  cv = utils.LowerCase(char1);
  if (order.PropertyExists(char1)) { 
    tmplist = canVoices.Slice(0);
    ix = utils.GetArrayIndex(tmplist, lookupCanVs.FullInstrumentName);
    vkey = tmplistix;
    tmplistix = 0;
    d1 = Substring(vkey,0,1); //digit 1: H or L or Pno
    d2 = Substring(vkey,1,1); //digit 2: S,A,T,B
    outhi = CreateSparseArray();
    outlo = CreateSparseArray();
    pan = 0;
    outhi.Push(vkey & ',' & pan); //push centre voice
    //set any other of this current voice
    for i = 0 to tmplist.Length {
      if (tmplisti !=0) {
        vkey = tmplisti;      
        if (Substring(vkey,0,1) = d1 and Substring(vkey,1,1) = d2) {
          tmplisti = 0;
          if (d1 = 1) {
            pan = pan+1;
            outhi.Push(vkey & ',' & pan);
          } else {
            pan = pan-1;
            outlo.Push(vkey & ',' & pan);
          }
        }
      }
    }
    //set any other of this register
    for i = 0 to tmplist.Length {
      if (tmplisti !=0) {
        vkey = tmplisti;
        if (Substring(vkey,0,1) = d1) {
          tmplisti = 0;
          if (d1 = 1) {
            pan = pan+1;
            outhi.Push(vkey & ',' & pan);
          } else {
            pan = pan-1;
            outlo.Push(vkey & ',' & pan);
          }
        }
      }
    }
    //output other register (L or H)
    pan = 0; //reset for other side of stage
    for i = 0 to tmplist.Length {
      if (tmplisti !=0) {
        vkey = tmplisti;
        if (Substring(vkey,0,1) != 3) {
          if (d1 = 1) {
            pan = pan-1;
            outlo.Push(vkey & ',' & pan);
          } else {
            pan = pan+1;
            outhi.Push(vkey & ',' & pan);
          }
        } else {
          outlo.Push(vkey & ',-4');
        }
      }
    }
    outlo.Reverse();
    outarray = outlo.Concat(outhi);
    panset = CreateArray();
    for i = 0 to outarray.Length {
      ps = SplitString(outarrayi, ',');
      nst = lookupVoicesps0;
      trace('1:' & nst.FullInstrumentName & ' 2:' & (ps1 * 15));
      nst.Pan = (ps1 * 15);
      if (nst.FullInstrumentName != s.FullInstrumentName) {
        //nst.MuteMode = 1; // half-vol for other voices
        nst.Volume = 40;
      } else {
        //nst.MuteMode = 2; //Full vol for selected voice
        nst.Volume = 100;
      }
    }

    trace(s.FullInstrumentName);
    vn = CharAt(s.FullInstrumentName, (Length(s.FullInstrumentName) - 1));
    if (not(utils.IsNumeric(vn,1))) {
      vn = '';     
    }
    filenameAudio = (strPath & strFileBase & '_' & cv & vn & strExtension);
    trace('Fname:' & filenameAudio);
    ok = score.SaveAsAudio(filenameAudio);
    if (ok = False) {
        MyMessageBox('Cannot export audio');
        StopPlugin();
    }
    //StopPlugin();
  } 
}


}"
	PanAroundVoice "(selvoice) {
}"
	GetTerminatedFolderName "(strFolderName) {
len = Length(strFolderName);
ch = CharAt(strFolderName, (len - 1));  // last char in string
if (Sibelius.PathSeparator != ch) {
    strFolderName = strFolderName & Sibelius.PathSeparator;
}
return strFolderName;
}"
}
